var documenterSearchIndex = {"docs":
[{"location":"stream/#Data-Stream","page":"Stream","title":"Data Stream","text":"","category":"section"},{"location":"stream/","page":"Stream","title":"Stream","text":"Um fluxo de dados (data stream) é uma sequência ordenada, podendo ser ilimitada, de dados que chegam ao longo do tempo. Os intervalos de tempo entre a chegada de cada item podem variar. Os dados podem ser um atributo simples, como tuplas de banco de dados relacional ou estruturas mais complexas, como imagens [Krawczyk et al, 2017].","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"A ideia será escutar o stream por um certo período de tempo. Ficando na seguinte forma:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"EasyStream.listen(stream, time = 1000)","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"Contudo, nessa primeira versão os dados estão em memória. Não necessitando por enquanto o tempo. Essa característica de fluxo de dados apresenta a necessidade de desenvolver sequenciamento em lote, não importando o tempo de escuta. Desta forma, podemos ter diversos tipos de Stream e todos irão herdar:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"AbstractStream","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"A maior dificuldade é na parte na captura de dados pois pode variar. Alguns exemplos: CSV, API, memória, geração de dados, ... Para tal, foi imaginado um tipo genérico chamado Connector que será explorado na próxima seção.","category":"page"},{"location":"stream/#Connectors","page":"Stream","title":"Connectors","text":"","category":"section"},{"location":"stream/","page":"Stream","title":"Stream","text":"O Connector será responsável em capturar os dados na fonte e irá passar para o stream já processado. O stream possuirá um AbstractConnector e ele precisará possuir algumas funções implementadas e a principal é next que irá fornecer o próximo dado processado. Foi implementado dois Connectors:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"GeneratorConnector: um conector para geração de dados.\nTablesConnector: um conector para dados que respeitam a interface Tables.jl","category":"page"},{"location":"stream/#GeneratorConnector","page":"Stream","title":"GeneratorConnector","text":"","category":"section"},{"location":"stream/","page":"Stream","title":"Stream","text":"O GeneratorConnector tem como objetivo utilizar funções para gerar dados. A ideia é que ele possa ser utilizado com o SyntheticDatasets.jl. O construtor precisará receber a função geradora e poderá ser passado os argumentos adicionais dessa função como parâmetro","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"using EasyStream\nusing SyntheticDatasets\n\nconn_gen = EasyStream.GeneratorConnector(SyntheticDatasets.generate_blobs, \n\t\t\t\t\t\tcenters = [-1 1;-0.5 0.75], \n                                        \tcluster_std = 0.225, \n                                        \tcenter_box = (-1.5, 1.5));","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"O DataFrames implementa a interface Tables.jl, mas existem outros pacotes como:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"CSV\nMLJ\nSQLite","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"Exemplo:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"using DataFrames\ndf = DataFrames.DataFrame(x = [1, 2, 3, 4, 5, 6], y = [6, 5, 4, 3, 2, 1]);","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"Para criar um TablesConnector é só passar o dado diretamente para ele.","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"conn_df = EasyStream.TablesConnector(df);","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"Existem outras funções auxiliaries como:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"conn_df_suffle = EasyStream.TablesConnector(df, shuffle = true); # Suffle\nconn_df_orderby = EasyStream.TablesConnector(df, :x); # Ordernação","category":"page"},{"location":"stream/#Streams","page":"Stream","title":"Streams","text":"","category":"section"},{"location":"stream/#BatchStream","page":"Stream","title":"BatchStream","text":"","category":"section"},{"location":"stream/","page":"Stream","title":"Stream","text":"Foi implementado o BatchStream, que é um AbstractStream, e ele abstrai o fluxo de dados. Ele receberá por parâmetro um AbstractConnector e opcionalmente o tamanho do batch. Exemplo:","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"stream = EasyStream.BatchStream(conn_gen; batch = 5);","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"Ou fazer uma interação através de um for.","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"for values in stream\n\t@show values\n\tbreak # é um loop infinito pois utiliza um gerador de dados\nend","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"Dependendo do caso, o stream pode possuir um tamanho infinito e, assim, foi criado a função range para auxiliar definindo um limite na interação.","category":"page"},{"location":"stream/","page":"Stream","title":"Stream","text":"for values in EasyStream.range(5, stream)\n\tEasyStream.listen(stream)\nend","category":"page"},{"location":"stream/#Referências","page":"Stream","title":"Referências","text":"","category":"section"},{"location":"stream/","page":"Stream","title":"Stream","text":"Krawczyk, Bartosz, et al. 'Ensemble learning for data stream analysis: A survey.' Information Fusion 37 (2017): 132-156.","category":"page"},{"location":"modifiers/#Modifiers","page":"Modifiers","title":"Modifiers","text":"","category":"section"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"Durante o fluxo de dados, o desenvolvedor poderá manipular e processar os dados sob demanda. Neste interim, surge a ideia dos modificadores (Modifiers). O desenvolvedor poderá adicionar modificadores e eles irão manipular os dados após a função listen. Alguns exemplos de possibilidade:","category":"page"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"Geração de ruído\nProcessamento de dados\nFiltragem de dados","category":"page"},{"location":"modifiers/#FilterModifier","page":"Modifiers","title":"FilterModifier","text":"","category":"section"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"O FilterModifier é um Modifier com objetivo em filtrar colunas desnecessárias do stream. Exemplo de utilização:","category":"page"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"EasyStream.reset!(stream_filter) # função para reiniciar o stream\nmodifier_filter = EasyStream.FilterModifier(:y);\npush!(stream_filter, modifier_filter);\n\nEasyStream.listen(stream_filter)","category":"page"},{"location":"modifiers/#AlterDataModifier","page":"Modifiers","title":"AlterDataModifier","text":"","category":"section"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"O AlterDataModifier é um Modifier com objetivo em processar e alterar informações do stream. Ele recebe por parâmetro uma função que poderá manipular os dados, recebendo o dado e o evento do stream. Exemplo de utilização:","category":"page"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"EasyStream.reset!(stream_filter) # função para reiniciar o stream\nmodifier_alter_1 = EasyStream.AlterDataModifier((data,event)-> data[:x] .= 5)\npush!(stream_filter, modifier_alter_1);\n\nEasyStream.listen(stream_filter)","category":"page"},{"location":"modifiers/","page":"Modifiers","title":"Modifiers","text":"O dado irá receber um DataFrame e o evento será uma estrutura onde possuirá os argumentos de construção do AbstractStream e do AbstractConnector. Desta forma, é possível alterar até a geração dos dados!","category":"page"},{"location":"#EasyStream.jl","page":"Introduction","title":"EasyStream.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"An extensible framework for data stream in Julia.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Build Status) (Image: Coverage Status) (Image: Latest Documentation) (Image: License File)","category":"page"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"O EasyStream.jl tem como objetivo criar uma interface simples para trabalhar com stream, atuando como exemplo em problemas relacionados como o concept drift. Nas próximas seções serão discutidos os elementos básicos do framework.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Get the latest stable release with Julia's package manager:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add EasyStream","category":"page"},{"location":"#Tutorials","page":"Introduction","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Under construction.","category":"page"},{"location":"#Quick-example","page":"Introduction","title":"Quick example","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Below is a quick preview of the high-level API:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"\nusing EasyStream\nusing SyntheticDatasets\n\nconn_gen = EasyStream.GeneratorConnector(SyntheticDatasets.generate_blobs, \n\t\t\t\t\t\tcenters = [-1 1;-0.5 0.75], \n                                        \tcluster_std = 0.225, \n                                        \tcenter_box = (-1.5, 1.5));","category":"page"},{"location":"#Project-organization","page":"Introduction","title":"Project organization","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The project is split into various packages:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Package Description\nStreamDatasets.jl Package with synthetics datasets. (under construction)\nSyntheticDatasets.jl Packages with stream datasets.","category":"page"}]
}
